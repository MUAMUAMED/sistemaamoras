// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuários do sistema (atendentes, gerentes, etc.)
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(ATTENDANT)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  leads Lead[]
  sales Sale[]

  @@map("users")
}

// Categorias de produtos (Vestidos, Blusas, etc.)
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  code        String    @unique // Código numérico de 2 dígitos (ex: Vestido = 50)
  description String?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  products      Product[]
  subcategories Subcategory[]

  @@map("categories")
}

// Subcategorias de produtos
model Subcategory {
  id          String    @id @default(cuid())
  name        String
  code        String    // Código numérico de 2 dígitos
  description String?
  categoryId  String
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  category Category  @relation(fields: [categoryId], references: [id])
  products Product[]

  // Índices únicos compostos
  @@unique([categoryId, name], name: "categoryId_name")
  @@unique([categoryId, code], name: "categoryId_code")
  @@map("subcategories")
}

// Estampas dos produtos
model Pattern {
  id          String    @id @default(cuid())
  name        String    @unique
  code        String    @unique // Código numérico de 4 dígitos (ex: Azul Marinho = 0032)
  description String?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  products Product[]

  @@map("patterns")
}

// Tamanhos dos produtos
model Size {
  id        String    @id @default(cuid())
  name      String    @unique // P, M, G, GG, etc.
  code      String    @unique // Código numérico de 2 dígitos (ex: M = 05)
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relacionamentos
  products Product[]

  @@map("sizes")
}

// Produtos (roupas)
model Product {
  id            String   @id @default(cuid())
  name          String
  categoryId    String
  subcategoryId String?  // Opcional - subcategoria do produto
  sizeId        String   // Relação com o modelo Size
  patternId     String
  price         Float
  stock         Int      @default(0) // Estoque total (para compatibilidade)
  stockLoja     Int      @default(0) // Estoque na Loja
  stockArmazem  Int      @default(0) // Estoque no Armazém
  minStock      Int      @default(5)
  barcode       String   @unique
  qrcodeUrl     String?
  imageUrl      String?  // URL da imagem do produto
  description     String?
  active          Boolean  @default(true)
  inProduction    Boolean  @default(true) // Status de produção - true quando recém criado (manter para compatibilidade)
  status          ProductStatus @default(PROCESSANDO) // Status do produto
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  category       Category        @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory?    @relation(fields: [subcategoryId], references: [id])
  size           Size            @relation(fields: [sizeId], references: [id])
  pattern        Pattern         @relation(fields: [patternId], references: [id])
  saleItems      SaleItem[]
  stockMovements StockMovement[]

  @@map("products")
}

// Leads/Clientes
model Lead {
  id               String     @id @default(cuid())
  name             String
  phone            String     @unique
  email            String?
  channel          String     // WhatsApp, Instagram, Site, Loja Física, etc.
  source           String?    // Origem mais específica (ex: "WhatsApp - Promoção Black Friday")
  status           LeadStatus @default(NEW_LEAD)
  assignedToId     String?
  notes            String?
  totalPurchases   Float      @default(0)
  purchaseCount    Int        @default(0)
  lastInteraction  DateTime?
  leadScore        Int        @default(0) // Pontuação do lead (0-100)
  tags             String[]   // Tags para categorização
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Relacionamentos
  assignedTo   User?           @relation(fields: [assignedToId], references: [id])
  interactions Interaction[]
  sales        Sale[]

  @@map("leads")
}

// Interações/Histórico do lead
model Interaction {
  id          String          @id @default(cuid())
  leadId      String
  userId      String?         // Usuário que fez a interação
  type        InteractionType
  title       String          // Título da interação
  description String
  outcome     String?         // Resultado da interação
  nextAction  String?         // Próxima ação planejada
  scheduledAt DateTime?       // Agendamento de follow-up
  createdAt   DateTime        @default(now())

  // Relacionamentos
  lead Lead @relation(fields: [leadId], references: [id])

  @@map("interactions")
}

// Vendas
model Sale {
  id                String         @id @default(cuid())
  saleNumber        String         @unique // Número sequencial da venda
  leadId            String?
  leadName          String?        // Nome do cliente (para vendas sem lead cadastrado)
  leadPhone         String?        // Telefone do cliente (para vendas sem lead cadastrado)
  sellerId          String
  subtotal          Float          // Subtotal dos produtos
  discount          Float          @default(0) // Desconto aplicado
  total             Float          // Total final
  status            SaleStatus     @default(PENDING)
  paymentMethod     PaymentMethod
  paymentReference  String?        // Referência do pagamento (ID do gateway)
  paymentUrl        String?        // URL de pagamento (para Pix/Boleto)
  gatewayResponse   Json?          // Resposta completa do gateway
  notes             String?
  deliveryMethod    DeliveryMethod @default(PICKUP) // Entrega ou retirada
  deliveryAddress   String?        // Endereço de entrega
  deliveryFee       Float          @default(0) // Taxa de entrega
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  paidAt            DateTime?      // Data do pagamento
  deliveredAt       DateTime?      // Data da entrega

  // Relacionamentos
  lead      Lead?      @relation(fields: [leadId], references: [id])
  seller    User       @relation(fields: [sellerId], references: [id])
  items     SaleItem[]

  @@map("sales")
}

// Itens da venda
model SaleItem {
  id         String @id @default(cuid())
  saleId     String
  productId  String
  quantity   Int
  unitPrice  Float  // Preço unitário no momento da venda
  discount   Float  @default(0) // Desconto específico do item
  total      Float  // Total do item (quantidade × preço - desconto)

  // Relacionamentos
  sale    Sale    @relation(fields: [saleId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

// Movimentações de estoque
model StockMovement {
  id          String            @id @default(cuid())
  productId   String
  type        StockMovementType
  quantity    Int               // Quantidade (positiva para entrada, negativa para saída)
  reason      String
  reference   String?           // Referência (ID da venda, nota fiscal, etc.)
  userId      String?           // Usuário responsável pela movimentação
  location    StockLocation?    // Localização do estoque (para ENTRY/EXIT/ADJUSTMENT)
  fromLocation StockLocation?   // Localização de origem (para TRANSFER)
  toLocation  StockLocation?    // Localização de destino (para TRANSFER)
  createdAt   DateTime          @default(now())

  // Relacionamentos
  product Product @relation(fields: [productId], references: [id])

  @@map("stock_movements")
}

// Configurações do sistema
model SystemConfig {
  id               String   @id @default(cuid())
  chatwootUrl      String?  // URL do Chatwoot
  chatwootToken    String?  // Token do Chatwoot
  n8nWebhookUrl    String?  // URL do webhook do n8n
  paymentGateway   String?  // Gateway principal (mercadopago, pagarme, etc.)
  gatewayConfig    Json?    // Configurações do gateway
  companyName      String   @default("Amoras Capital")
  companyPhone     String?
  companyEmail     String?
  companyAddress   String?
  saleNumberPrefix String   @default("AC") // Prefixo do número da venda
  nextSaleNumber   Int      @default(1)    // Próximo número de venda
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("system_config")
}

// Webhooks recebidos (para auditoria)
model WebhookLog {
  id        String   @id @default(cuid())
  source    String   // chatwoot, mercadopago, etc.
  event     String   // tipo do evento
  data      Json     // dados recebidos
  processed Boolean  @default(false)
  error     String?  // erro de processamento (se houver)
  createdAt DateTime @default(now())

  @@map("webhook_logs")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  ATTENDANT
}

enum LeadStatus {
  NEW_LEAD          // Novo Lead
  IN_SERVICE        // Em Atendimento  
  INTERESTED        // Interessado
  NEGOTIATING       // Negociando
  SALE_COMPLETED    // Venda Concluída
  COLD_LEAD         // Lead Frio
  NO_RESPONSE       // Sem Resposta
  REACTIVATE        // Reativar
}

enum InteractionType {
  CALL              // Ligação
  WHATSAPP          // WhatsApp
  EMAIL             // E-mail
  MEETING           // Reunião
  NOTE              // Anotação
  STATUS_CHANGE     // Mudança de Status
  SALE              // Venda
  FOLLOW_UP         // Follow-up
}

enum SaleStatus {
  PENDING           // Pendente (aguardando pagamento)
  PAID              // Pago
  PROCESSING        // Processando
  SHIPPED           // Enviado
  DELIVERED         // Entregue
  CANCELED          // Cancelado
  REFUNDED          // Reembolsado
}

enum PaymentMethod {
  CASH              // Dinheiro
  PIX               // Pix
  CREDIT_CARD       // Cartão de Crédito
  DEBIT_CARD        // Cartão de Débito
  BANK_SLIP         // Boleto
  BANK_TRANSFER     // Transferência
}

enum DeliveryMethod {
  PICKUP            // Retirada na loja
  DELIVERY          // Entrega
  SHIPPING          // Envio pelos Correios
}

enum StockMovementType {
  ENTRY             // Entrada
  EXIT              // Saída
  ADJUSTMENT        // Ajuste
  SALE              // Venda
  RETURN            // Devolução
  LOSS              // Perda
  TRANSFER          // Transferência entre estoques
}

enum StockLocation {
  LOJA              // Estoque da Loja
  ARMAZEM           // Estoque do Armazém
}

enum ProductStatus {
  PROCESSANDO       // Produto em processamento/criação
  ATIVO             // Produto ativo no estoque
  INATIVO           // Produto inativo
}
