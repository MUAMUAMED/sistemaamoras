#!/bin/bash

# Script de Deploy - Nova Funcionalidade de Estoque por Localiza√ß√£o
# Sistema Amoras Capital - EasyPanel

set -e

echo "üè™ Iniciando deploy da funcionalidade de Estoque por Localiza√ß√£o..."
echo "üìÖ $(date '+%Y-%m-%d %H:%M:%S')"

# Fun√ß√£o para logs coloridos
log_info() {
    echo -e "\033[0;34m[INFO]\033[0m $1"
}

log_success() {
    echo -e "\033[0;32m[SUCCESS]\033[0m $1"
}

log_error() {
    echo -e "\033[0;31m[ERROR]\033[0m $1"
}

log_warning() {
    echo -e "\033[0;33m[WARNING]\033[0m $1"
}

# Verificar se estamos na raiz do projeto
if [ ! -f "package.json" ]; then
    log_error "Execute este script na raiz do projeto!"
    exit 1
fi

# 1. Gerar Migration para Estoque por Localiza√ß√£o
log_info "üì¶ Preparando migration do banco de dados..."

cd backend

# Criar diret√≥rio de migrations se n√£o existir
mkdir -p prisma/migrations

# Gerar migration
log_info "Gerando migration para estoque por localiza√ß√£o..."
npx prisma migrate dev --name add_stock_locations --create-only

log_success "Migration gerada com sucesso!"

# 2. Backend Deploy
log_info "üì¶ Fazendo build do Backend..."

log_info "Instalando depend√™ncias do backend..."
npm ci --legacy-peer-deps

log_info "Gerando Prisma Client..."
npx prisma generate

log_info "Compilando TypeScript..."
npm run build

log_success "Backend compilado com sucesso!"

cd ..

# 3. Frontend Deploy
log_info "üé® Fazendo build do Frontend..."

cd frontend

log_info "Instalando depend√™ncias do frontend..."
npm ci --legacy-peer-deps

log_info "Criando build de produ√ß√£o..."
npm run build

log_success "Frontend compilado com sucesso!"

cd ..

# 4. Verifica√ß√µes finais
log_info "üîç Executando verifica√ß√µes finais..."

# Verificar se os arquivos de build existem
if [ ! -d "backend/dist" ]; then
    log_error "Build do backend n√£o encontrado!"
    exit 1
fi

if [ ! -d "frontend/build" ]; then
    log_error "Build do frontend n√£o encontrado!"
    exit 1
fi

log_success "‚úÖ Build conclu√≠do com sucesso!"

# 5. Instru√ß√µes para deploy no EasyPanel
echo ""
echo "üöÄ ========================================="
echo "üìã INSTRU√á√ïES PARA DEPLOY NO EASYPANEL"
echo "üöÄ ========================================="
echo ""
log_info "1. Fazer commit e push das altera√ß√µes:"
echo "   git add ."
echo "   git commit -m \"feat: Sistema de estoque por localiza√ß√£o (Loja/Armaz√©m)\""
echo "   git push origin main"
echo ""
log_info "2. No EasyPanel - Deploy Backend:"
echo "   - Acesse o container do backend"
echo "   - Clique em 'Deploy Now' ou aguarde deploy autom√°tico"
echo "   - Aguarde o deploy finalizar"
echo ""
log_warning "3. IMPORTANTE - Executar Migration no Banco:"
echo "   - Acesse o terminal do container backend no EasyPanel"
echo "   - Execute: npx prisma migrate deploy"
echo "   - Ou execute o SQL abaixo manualmente no PostgreSQL:"
echo ""

# 6. Gerar SQL manual para migration
log_info "üìÑ SQL para execu√ß√£o manual (caso necess√°rio):"
echo "=================================================="
echo "-- Adicionar campos de estoque por localiza√ß√£o"
echo "ALTER TABLE \"products\" ADD COLUMN IF NOT EXISTS \"stockLoja\" INTEGER NOT NULL DEFAULT 0;"
echo "ALTER TABLE \"products\" ADD COLUMN IF NOT EXISTS \"stockArmazem\" INTEGER NOT NULL DEFAULT 0;"
echo ""
echo "-- Adicionar campos de localiza√ß√£o em movimenta√ß√µes"
echo "CREATE TYPE \"StockLocation\" AS ENUM ('LOJA', 'ARMAZEM');"
echo "ALTER TABLE \"stock_movements\" ADD COLUMN IF NOT EXISTS \"location\" \"StockLocation\";"
echo "ALTER TABLE \"stock_movements\" ADD COLUMN IF NOT EXISTS \"fromLocation\" \"StockLocation\";"
echo "ALTER TABLE \"stock_movements\" ADD COLUMN IF NOT EXISTS \"toLocation\" \"StockLocation\";"
echo ""
echo "-- Atualizar estoque total = loja + armaz√©m (para produtos existentes)"
echo "UPDATE \"products\" SET \"stockLoja\" = \"stock\", \"stockArmazem\" = 0 WHERE \"stockLoja\" = 0 AND \"stockArmazem\" = 0;"
echo "=================================================="
echo ""

log_info "4. No EasyPanel - Deploy Frontend:"
echo "   - Acesse o container do frontend"
echo "   - Clique em 'Deploy Now' ou aguarde deploy autom√°tico"
echo ""

log_info "5. Verificar funcionamento:"
echo "   - Acesse a URL do sistema"
echo "   - Teste a p√°gina de produtos"
echo "   - Verifique se aparecem as informa√ß√µes de estoque por localiza√ß√£o"
echo "   - Teste o bot√£o 'Transfer' entre localiza√ß√µes"
echo ""

log_success "üéâ NOVAS FUNCIONALIDADES IMPLEMENTADAS:"
echo "   ‚úÖ Estoque separado por Loja e Armaz√©m"
echo "   ‚úÖ Bot√µes de Entrada e Sa√≠da por localiza√ß√£o"
echo "   ‚úÖ Modal de Transfer√™ncia entre estoques"
echo "   ‚úÖ Visualiza√ß√£o de estoque por localiza√ß√£o"
echo "   ‚úÖ Hist√≥rico completo de movimenta√ß√µes"
echo "   ‚úÖ APIs REST para gest√£o de estoque"
echo ""

log_info "üìû Em caso de problemas:"
echo "   - Verifique os logs do container no EasyPanel"
echo "   - Confirme se a migration foi executada com sucesso"
echo "   - Teste as APIs: /api/products (deve mostrar stockLoja e stockArmazem)"
echo ""

log_success "‚è∞ Deploy preparado! Siga as instru√ß√µes acima para aplicar no EasyPanel."